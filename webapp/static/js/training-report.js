/**\n * Training Report Viewer JavaScript\n */\n\nclass TrainingReportViewer {\n    constructor(sessionId, reportData) {\n        this.sessionId = sessionId;\n        this.reportData = reportData || {};\n        this.charts = {};\n        this.currentPage = 1;\n        this.questionsPerPage = 10;\n        this.filteredQuestions = [];\n        this.allQuestions = this.generateSampleQuestions();\n        \n        this.init();\n    }\n    \n    init() {\n        this.bindEvents();\n        this.initializeCharts();\n        this.populateQuestions();\n        this.setupNavigation();\n        this.setupShareModal();\n    }\n    \n    bindEvents() {\n        // Navigation\n        const sectionNav = document.getElementById('report-section-nav');\n        if (sectionNav) {\n            sectionNav.addEventListener('change', (e) => this.navigateToSection(e.target.value));\n        }\n        \n        // Action buttons\n        const printBtn = document.getElementById('print-report');\n        const downloadBtn = document.getElementById('download-pdf');\n        const shareBtn = document.getElementById('share-report');\n        \n        if (printBtn) {\n            printBtn.addEventListener('click', () => this.printReport());\n        }\n        \n        if (downloadBtn) {\n            downloadBtn.addEventListener('click', () => this.downloadPDF());\n        }\n        \n        if (shareBtn) {\n            shareBtn.addEventListener('click', () => this.showShareModal());\n        }\n    }\n    \n    initializeCharts() {\n        this.createQuestionTypeChart();\n        this.createProcessingTimeChart();\n        this.createConfidenceDistributionChart();\n        this.createConfidenceByTypeChart();\n    }\n    \n    createQuestionTypeChart() {\n        const canvas = document.getElementById('question-type-chart');\n        if (!canvas) return;\n        \n        const ctx = canvas.getContext('2d');\n        \n        this.charts.questionType = new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Multiple Choice', 'Short Answer', 'Essay', 'Calculation'],\n                datasets: [{\n                    data: [35, 25, 20, 20],\n                    backgroundColor: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444'],\n                    borderWidth: 0\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n    \n    createProcessingTimeChart() {\n        const canvas = document.getElementById('processing-time-chart');\n        if (!canvas) return;\n        \n        const ctx = canvas.getContext('2d');\n        \n        this.charts.processingTime = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['0-1s', '1-2s', '2-5s', '5-10s', '10s+'],\n                datasets: [{\n                    label: 'Questions',\n                    data: [45, 30, 15, 8, 2],\n                    backgroundColor: '#3b82f6'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n    \n    createConfidenceDistributionChart() {\n        const canvas = document.getElementById('confidence-distribution-chart');\n        if (!canvas) return;\n        \n        const ctx = canvas.getContext('2d');\n        \n        this.charts.confidenceDistribution = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['High (â‰¥80%)', 'Medium (60-80%)', 'Low (<60%)'],\n                datasets: [{\n                    data: [65, 25, 10],\n                    backgroundColor: ['#10b981', '#f59e0b', '#ef4444']\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false\n            }\n        });\n    }\n    \n    createConfidenceByTypeChart() {\n        const canvas = document.getElementById('confidence-by-type-chart');\n        if (!canvas) return;\n        \n        const ctx = canvas.getContext('2d');\n        \n        this.charts.confidenceByType = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['Multiple Choice', 'Short Answer', 'Essay', 'Calculation'],\n                datasets: [{\n                    label: 'Average Confidence',\n                    data: [0.85, 0.72, 0.68, 0.78],\n                    backgroundColor: ['#10b981', '#f59e0b', '#f59e0b', '#10b981']\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        max: 1\n                    }\n                }\n            }\n        });\n    }\n    \n    generateSampleQuestions() {\n        const questions = [];\n        const types = ['multiple_choice', 'short_answer', 'essay', 'calculation'];\n        \n        for (let i = 1; i <= 50; i++) {\n            questions.push({\n                id: i,\n                text: `Sample question ${i}`,\n                type: types[Math.floor(Math.random() * types.length)],\n                confidence: Math.random()\n            });\n        }\n        \n        return questions;\n    }\n    \n    populateQuestions() {\n        this.filteredQuestions = [...this.allQuestions];\n        this.renderQuestions();\n    }\n    \n    renderQuestions() {\n        const container = document.getElementById('questions-list');\n        if (!container) return;\n        \n        container.innerHTML = '';\n        \n        this.filteredQuestions.slice(0, 10).forEach(question => {\n            const div = document.createElement('div');\n            div.className = 'question-card bg-white border rounded-lg p-4';\n            div.innerHTML = `\n                <h3>Question ${question.id}</h3>\n                <p>${question.text}</p>\n                <span class=\"confidence\">${Math.round(question.confidence * 100)}%</span>\n            `;\n            container.appendChild(div);\n        });\n    }\n    \n    setupNavigation() {\n        // Navigation setup\n    }\n    \n    setupShareModal() {\n        // Share modal setup\n    }\n    \n    navigateToSection(sectionId) {\n        const section = document.getElementById(sectionId);\n        if (section) {\n            section.scrollIntoView({ behavior: 'smooth' });\n        }\n    }\n    \n    showShareModal() {\n        const modal = document.getElementById('share-modal');\n        if (modal) {\n            modal.style.display = 'block';\n        }\n    }\n    \n    printReport() {\n        window.print();\n    }\n    \n    async downloadPDF() {\n        try {\n            const response = await fetch(`/training/session/${this.sessionId}/report/download`);\n            if (response.ok) {\n                const blob = await response.blob();\n                const url = window.URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = `training-report-${this.sessionId}.pdf`;\n                a.click();\n                window.URL.revokeObjectURL(url);\n            }\n        } catch (error) {\n            console.error('Error downloading PDF:', error);\n        }\n    }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    const sessionId = window.location.pathname.split('/').slice(-2, -1)[0];\n    if (sessionId && document.getElementById('overview')) {\n        new TrainingReportViewer(sessionId);\n    }\n});"