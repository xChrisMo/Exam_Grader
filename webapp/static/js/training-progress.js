/**\n * Training Progress Monitoring JavaScript\n * \n * Handles real-time progress monitoring, WebSocket connections,\n * confidence visualization, and live log display.\n */\n\nclass TrainingProgressMonitor {\n    constructor(sessionId) {\n        this.sessionId = sessionId;\n        this.websocket = null;\n        this.isConnected = false;\n        this.autoScroll = true;\n        this.startTime = new Date();\n        this.confidenceChart = null;\n        this.progressData = {\n            percentage: 0,\n            currentStep: 'Initializing...',\n            status: 'in_progress',\n            filesProcessed: 0,\n            totalFiles: 0,\n            questionsGenerated: 0,\n            avgConfidence: 0,\n            errors: {\n                total: 0,\n                processing: 0,\n                llm: 0,\n                validation: 0\n            },\n            confidence: {\n                high: 0,\n                medium: 0,\n                low: 0\n            }\n        };\n        \n        this.trainingSteps = [\n            { id: 'init', name: 'Initialization', status: 'pending' },\n            { id: 'file_processing', name: 'File Processing', status: 'pending' },\n            { id: 'question_extraction', name: 'Question Extraction', status: 'pending' },\n            { id: 'llm_training', name: 'LLM Training', status: 'pending' },\n            { id: 'validation', name: 'Validation', status: 'pending' },\n            { id: 'completion', name: 'Completion', status: 'pending' }\n        ];\n        \n        this.init();\n    }\n    \n    init() {\n        this.bindEvents();\n        this.initializeWebSocket();\n        this.initializeConfidenceChart();\n        this.renderTrainingSteps();\n        this.startDurationTimer();\n        this.startProgressPolling();\n    }\n    \n    bindEvents() {\n        // Control buttons\n        const pauseBtn = document.getElementById('pause-training');\n        const stopBtn = document.getElementById('stop-training');\n        const autoScrollToggle = document.getElementById('auto-scroll-toggle');\n        const clearLogsBtn = document.getElementById('clear-logs');\n        \n        if (pauseBtn) {\n            pauseBtn.addEventListener('click', () => this.pauseTraining());\n        }\n        \n        if (stopBtn) {\n            stopBtn.addEventListener('click', () => this.stopTraining());\n        }\n        \n        if (autoScrollToggle) {\n            autoScrollToggle.addEventListener('click', () => this.toggleAutoScroll());\n        }\n        \n        if (clearLogsBtn) {\n            clearLogsBtn.addEventListener('click', () => this.clearLogs());\n        }\n        \n        // Handle page visibility changes\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden) {\n                this.handlePageHidden();\n            } else {\n                this.handlePageVisible();\n            }\n        });\n        \n        // Handle beforeunload\n        window.addEventListener('beforeunload', () => {\n            this.cleanup();\n        });\n    }\n    \n    initializeWebSocket() {\n        try {\n            // Use Socket.IO client instead of raw WebSocket\n            this.websocket = io('/training');\n            \n            // Join the specific training session room\n            this.websocket.emit('join_training_session', {\n                session_id: this.sessionId\n            });\n            \n            // Socket.IO event handlers\n            this.websocket.on('connect', () => {\n                console.log('Socket.IO connected');\n                this.isConnected = true;\n                this.updateConnectionStatus('connected');\n                \n                // Join the specific training session room\n                this.websocket.emit('join_training_session', {\n                    session_id: this.sessionId\n                });\n            });\n            \n            this.websocket.on('disconnect', () => {\n                console.log('Socket.IO disconnected');\n                this.isConnected = false;\n                this.updateConnectionStatus('disconnected');\n            });\n            \n            this.websocket.on('connect_error', (error) => {\n                console.error('Socket.IO connection error:', error);\n                this.updateConnectionStatus('error');\n                // Fall back to polling\n                this.startProgressPolling();\n            });\n            \n            // Training-specific event handlers\n            this.websocket.on('progress_update', (data) => {\n                this.handleWebSocketMessage(data);\n            });\n            \n            this.websocket.on('log_entry', (data) => {\n                this.handleWebSocketMessage(data);\n            });\n            \n            this.websocket.on('error', (data) => {\n                this.handleWebSocketMessage(data);\n            });\n            \n            this.websocket.on('step_update', (data) => {\n                this.handleWebSocketMessage(data);\n            });\n            \n            this.websocket.on('confidence_update', (data) => {\n                this.handleWebSocketMessage(data);\n            });\n            \n            this.websocket.on('status_change', (data) => {\n                this.handleWebSocketMessage(data);\n            });\n            \n            this.websocket.on('joined_session', (data) => {\n                console.log('Joined training session:', data.session_id);\n                // Request initial progress update\n                this.websocket.emit('request_progress_update', {\n                    session_id: this.sessionId\n                });\n            });\n            \n        } catch (error) {\n            console.error('Failed to initialize WebSocket:', error);\n            this.updateConnectionStatus('error');\n            // Fall back to polling\n            this.startProgressPolling();\n        }\n    }\n    \n    handleWebSocketMessage(data) {\n        switch (data.type) {\n            case 'progress_update':\n                this.updateProgress(data.data);\n                break;\n            case 'log_entry':\n                this.addLogEntry(data.data);\n                break;\n            case 'error':\n                this.handleError(data.data);\n                break;\n            case 'step_update':\n                this.updateTrainingStep(data.data);\n                break;\n            case 'confidence_update':\n                this.updateConfidenceData(data.data);\n                break;\n            case 'status_change':\n                this.updateStatus(data.data);\n                break;\n            default:\n                console.log('Unknown WebSocket message type:', data.type);\n        }\n    }\n    \n    updateProgress(data) {\n        this.progressData = { ...this.progressData, ...data };\n        \n        // Update progress bar\n        const progressBar = document.getElementById('main-progress-bar');\n        const progressPercentage = document.getElementById('progress-percentage');\n        const ringPercentage = document.getElementById('ring-percentage');\n        const progressRingFill = document.getElementById('progress-ring-fill');\n        \n        if (progressBar) {\n            progressBar.style.width = `${this.progressData.percentage}%`;\n        }\n        \n        if (progressPercentage) {\n            progressPercentage.textContent = `${Math.round(this.progressData.percentage)}%`;\n        }\n        \n        if (ringPercentage) {\n            ringPercentage.textContent = `${Math.round(this.progressData.percentage)}%`;\n        }\n        \n        if (progressRingFill) {\n            const circumference = 2 * Math.PI * 52;\n            const offset = circumference - (this.progressData.percentage / 100) * circumference;\n            progressRingFill.style.strokeDashoffset = offset;\n        }\n        \n        // Update current step\n        const currentStepElement = document.getElementById('current-step');\n        if (currentStepElement) {\n            currentStepElement.textContent = this.progressData.currentStep;\n        }\n        \n        // Update statistics\n        this.updateStatistics();\n    }\n    \n    updateStatistics() {\n        const filesProcessed = document.getElementById('files-processed');\n        const questionsGenerated = document.getElementById('questions-generated');\n        const avgConfidence = document.getElementById('avg-confidence');\n        \n        if (filesProcessed) {\n            filesProcessed.textContent = `${this.progressData.filesProcessed} / ${this.progressData.totalFiles}`;\n        }\n        \n        if (questionsGenerated) {\n            questionsGenerated.textContent = this.progressData.questionsGenerated;\n        }\n        \n        if (avgConfidence) {\n            const confidence = this.progressData.avgConfidence;\n            avgConfidence.textContent = confidence > 0 ? confidence.toFixed(2) : '-';\n        }\n        \n        // Update error counts\n        const totalErrors = document.getElementById('total-errors');\n        const processingErrors = document.getElementById('processing-errors');\n        const llmErrors = document.getElementById('llm-errors');\n        const validationErrors = document.getElementById('validation-errors');\n        \n        if (totalErrors) totalErrors.textContent = this.progressData.errors.total;\n        if (processingErrors) processingErrors.textContent = this.progressData.errors.processing;\n        if (llmErrors) llmErrors.textContent = this.progressData.errors.llm;\n        if (validationErrors) validationErrors.textContent = this.progressData.errors.validation;\n    }\n    \n    updateConfidenceData(data) {\n        this.progressData.confidence = { ...this.progressData.confidence, ...data };\n        \n        const total = this.progressData.confidence.high + this.progressData.confidence.medium + this.progressData.confidence.low;\n        \n        if (total > 0) {\n            // Update confidence bars\n            const highBar = document.getElementById('high-confidence-bar');\n            const mediumBar = document.getElementById('medium-confidence-bar');\n            const lowBar = document.getElementById('low-confidence-bar');\n            \n            const highCount = document.getElementById('high-confidence-count');\n            const mediumCount = document.getElementById('medium-confidence-count');\n            const lowCount = document.getElementById('low-confidence-count');\n            \n            if (highBar) highBar.style.width = `${(this.progressData.confidence.high / total) * 100}%`;\n            if (mediumBar) mediumBar.style.width = `${(this.progressData.confidence.medium / total) * 100}%`;\n            if (lowBar) lowBar.style.width = `${(this.progressData.confidence.low / total) * 100}%`;\n            \n            if (highCount) highCount.textContent = this.progressData.confidence.high;\n            if (mediumCount) mediumCount.textContent = this.progressData.confidence.medium;\n            if (lowCount) lowCount.textContent = this.progressData.confidence.low;\n            \n            // Update chart\n            this.updateConfidenceChart();\n        }\n    }\n    \n    updateTrainingStep(data) {\n        const stepIndex = this.trainingSteps.findIndex(step => step.id === data.stepId);\n        if (stepIndex !== -1) {\n            this.trainingSteps[stepIndex].status = data.status;\n            this.renderTrainingSteps();\n        }\n    }\n    \n    renderTrainingSteps() {\n        const container = document.getElementById('training-steps');\n        if (!container) return;\n        \n        container.innerHTML = '';\n        \n        this.trainingSteps.forEach((step, index) => {\n            const isLast = index === this.trainingSteps.length - 1;\n            const stepElement = document.createElement('li');\n            \n            stepElement.innerHTML = `\n                <div class=\"relative pb-8\">\n                    ${!isLast ? '<span class=\"absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200\" aria-hidden=\"true\"></span>' : ''}\n                    <div class=\"relative flex space-x-3\">\n                        <div>\n                            <span class=\"step-indicator h-8 w-8 rounded-full flex items-center justify-center ring-8 ring-white ${\n                                step.status === 'completed' ? 'bg-green-500' :\n                                step.status === 'active' ? 'bg-blue-500 pulse' :\n                                step.status === 'error' ? 'bg-red-500' :\n                                'bg-gray-300'\n                            }\">\n                                ${step.status === 'completed' ? \n                                    '<svg class=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\"></path></svg>' :\n                                    step.status === 'active' ?\n                                    '<svg class=\"w-5 h-5 text-white animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle><path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg>' :\n                                    step.status === 'error' ?\n                                    '<svg class=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg>' :\n                                    `<span class=\"text-gray-500 text-sm font-medium\">${index + 1}</span>`\n                                }\n                            </span>\n                        </div>\n                        <div class=\"min-w-0 flex-1 pt-1.5 flex justify-between space-x-4\">\n                            <div>\n                                <p class=\"text-sm font-medium text-gray-900\">${step.name}</p>\n                                <p class=\"text-sm text-gray-500\">\n                                    ${step.status === 'completed' ? 'Completed' :\n                                      step.status === 'active' ? 'In Progress' :\n                                      step.status === 'error' ? 'Error' :\n                                      'Pending'}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n            \n            container.appendChild(stepElement);\n        });\n    }\n    \n    addLogEntry(logData) {\n        const container = document.getElementById('log-container');\n        if (!container) return;\n        \n        const logEntry = document.createElement('div');\n        logEntry.className = 'log-entry';\n        \n        const timestamp = new Date().toLocaleTimeString();\n        const level = logData.level || 'INFO';\n        const message = logData.message || logData;\n        \n        const levelColor = {\n            'ERROR': 'text-red-400',\n            'WARN': 'text-yellow-400',\n            'INFO': 'text-green-400',\n            'DEBUG': 'text-blue-400'\n        }[level] || 'text-green-400';\n        \n        logEntry.innerHTML = `\n            <span class=\"text-gray-500\">[${timestamp}]</span>\n            <span class=\"${levelColor} font-medium\">${level}</span>\n            <span class=\"text-gray-300\">${message}</span>\n        `;\n        \n        container.appendChild(logEntry);\n        \n        // Auto-scroll if enabled\n        if (this.autoScroll) {\n            container.scrollTop = container.scrollHeight;\n        }\n        \n        // Limit log entries to prevent memory issues\n        const maxEntries = 1000;\n        while (container.children.length > maxEntries) {\n            container.removeChild(container.firstChild);\n        }\n    }\n    \n    handleError(errorData) {\n        this.progressData.errors.total++;\n        \n        if (errorData.type) {\n            this.progressData.errors[errorData.type]++;\n        }\n        \n        // Add to recent errors\n        const recentErrorsContainer = document.getElementById('recent-errors');\n        if (recentErrorsContainer) {\n            const errorElement = document.createElement('div');\n            errorElement.className = 'text-sm text-red-600 error-highlight p-2 bg-red-50 rounded';\n            errorElement.textContent = errorData.message || 'Unknown error';\n            \n            recentErrorsContainer.insertBefore(errorElement, recentErrorsContainer.firstChild);\n            \n            // Keep only last 5 errors\n            while (recentErrorsContainer.children.length > 5) {\n                recentErrorsContainer.removeChild(recentErrorsContainer.lastChild);\n            }\n        }\n        \n        // Update error counts\n        this.updateStatistics();\n        \n        // Add to logs\n        this.addLogEntry({\n            level: 'ERROR',\n            message: errorData.message || 'Unknown error occurred'\n        });\n    }\n    \n    updateStatus(statusData) {\n        this.progressData.status = statusData.status;\n        \n        const statusElement = document.getElementById('training-status');\n        if (statusElement) {\n            const statusConfig = {\n                'in_progress': { color: 'bg-blue-100 text-blue-800', label: 'In Progress' },\n                'completed': { color: 'bg-green-100 text-green-800', label: 'Completed' },\n                'failed': { color: 'bg-red-100 text-red-800', label: 'Failed' },\n                'paused': { color: 'bg-yellow-100 text-yellow-800', label: 'Paused' }\n            };\n            \n            const config = statusConfig[statusData.status] || statusConfig['in_progress'];\n            statusElement.className = `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`;\n            statusElement.textContent = config.label;\n        }\n        \n        // Show/hide control buttons based on status\n        this.updateControlButtons();\n    }\n    \n    updateControlButtons() {\n        const pauseBtn = document.getElementById('pause-training');\n        const stopBtn = document.getElementById('stop-training');\n        \n        if (this.progressData.status === 'in_progress') {\n            if (pauseBtn) pauseBtn.style.display = 'inline-flex';\n            if (stopBtn) stopBtn.style.display = 'inline-flex';\n        } else {\n            if (pauseBtn) pauseBtn.style.display = 'none';\n            if (stopBtn) stopBtn.style.display = 'none';\n        }\n    }\n    \n    initializeConfidenceChart() {\n        const canvas = document.getElementById('confidence-chart');\n        if (!canvas) return;\n        \n        const ctx = canvas.getContext('2d');\n        \n        this.confidenceChart = new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: ['High Confidence', 'Medium Confidence', 'Low Confidence'],\n                datasets: [{\n                    data: [0, 0, 0],\n                    backgroundColor: [\n                        '#10b981', // green\n                        '#f59e0b', // yellow\n                        '#ef4444'  // red\n                    ],\n                    borderWidth: 0\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n    \n    updateConfidenceChart() {\n        if (!this.confidenceChart) return;\n        \n        this.confidenceChart.data.datasets[0].data = [\n            this.progressData.confidence.high,\n            this.progressData.confidence.medium,\n            this.progressData.confidence.low\n        ];\n        \n        this.confidenceChart.update();\n    }\n    \n    startDurationTimer() {\n        setInterval(() => {\n            const now = new Date();\n            const duration = now - this.startTime;\n            \n            const hours = Math.floor(duration / (1000 * 60 * 60));\n            const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((duration % (1000 * 60)) / 1000);\n            \n            const durationElement = document.getElementById('duration');\n            if (durationElement) {\n                durationElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n            }\n        }, 1000);\n    }\n    \n    startProgressPolling() {\n        // Fallback polling if WebSocket is not available\n        if (this.isConnected) return;\n        \n        setInterval(async () => {\n            try {\n                const response = await fetch(`/training/progress/${this.sessionId}`);\n                if (response.ok) {\n                    const data = await response.json();\n                    this.updateProgress(data);\n                }\n            } catch (error) {\n                console.error('Error polling progress:', error);\n            }\n        }, 2000);\n    }\n    \n    async pauseTraining() {\n        try {\n            const response = await fetch(`/training/session/${this.sessionId}/pause`, {\n                method: 'POST',\n                headers: {\n                    'X-CSRFToken': this.getCSRFToken()\n                }\n            });\n            \n            if (response.ok) {\n                this.showNotification('Training paused successfully', 'success');\n            } else {\n                throw new Error('Failed to pause training');\n            }\n        } catch (error) {\n            console.error('Error pausing training:', error);\n            this.showNotification('Failed to pause training', 'error');\n        }\n    }\n    \n    async stopTraining() {\n        if (!confirm('Are you sure you want to stop the training? This action cannot be undone.')) {\n            return;\n        }\n        \n        try {\n            const response = await fetch(`/training/session/${this.sessionId}/stop`, {\n                method: 'POST',\n                headers: {\n                    'X-CSRFToken': this.getCSRFToken()\n                }\n            });\n            \n            if (response.ok) {\n                this.showNotification('Training stopped successfully', 'success');\n                setTimeout(() => {\n                    window.location.href = '/training/sessions/manage';\n                }, 2000);\n            } else {\n                throw new Error('Failed to stop training');\n            }\n        } catch (error) {\n            console.error('Error stopping training:', error);\n            this.showNotification('Failed to stop training', 'error');\n        }\n    }\n    \n    toggleAutoScroll() {\n        this.autoScroll = !this.autoScroll;\n        const button = document.getElementById('auto-scroll-toggle');\n        if (button) {\n            button.classList.toggle('bg-blue-50', this.autoScroll);\n            button.classList.toggle('text-blue-700', this.autoScroll);\n        }\n    }\n    \n    clearLogs() {\n        const container = document.getElementById('log-container');\n        if (container) {\n            container.innerHTML = '<div class=\"log-entry text-gray-500\">[Logs cleared]</div>';\n        }\n    }\n    \n    updateConnectionStatus(status) {\n        const indicator = document.getElementById('connection-indicator');\n        const text = document.getElementById('connection-text');\n        \n        if (indicator && text) {\n            switch (status) {\n                case 'connected':\n                    indicator.className = 'w-3 h-3 bg-green-500 rounded-full pulse';\n                    text.textContent = 'Connected';\n                    break;\n                case 'disconnected':\n                    indicator.className = 'w-3 h-3 bg-yellow-500 rounded-full';\n                    text.textContent = 'Reconnecting...';\n                    break;\n                case 'error':\n                    indicator.className = 'w-3 h-3 bg-red-500 rounded-full';\n                    text.textContent = 'Connection Error';\n                    break;\n            }\n        }\n    }\n    \n    attemptReconnection() {\n        setTimeout(() => {\n            if (!this.isConnected) {\n                console.log('Attempting to reconnect WebSocket...');\n                this.initializeWebSocket();\n            }\n        }, 5000);\n    }\n    \n    handlePageHidden() {\n        // Reduce update frequency when page is hidden\n        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n            this.websocket.send(JSON.stringify({ type: 'reduce_frequency' }));\n        }\n    }\n    \n    handlePageVisible() {\n        // Resume normal update frequency\n        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n            this.websocket.send(JSON.stringify({ type: 'normal_frequency' }));\n        }\n    }\n    \n    cleanup() {\n        if (this.websocket) {\n            this.websocket.close();\n        }\n        \n        if (this.confidenceChart) {\n            this.confidenceChart.destroy();\n        }\n    }\n    \n    getCSRFToken() {\n        const token = document.querySelector('meta[name=\"csrf-token\"]');\n        return token ? token.getAttribute('content') : '';\n    }\n    \n    showNotification(message, type = 'info') {\n        // Create notification element\n        const notification = document.createElement('div');\n        notification.className = `fixed top-4 right-4 z-50 max-w-sm p-4 rounded-lg shadow-lg ${\n            type === 'error' ? 'bg-red-50 border border-red-200 text-red-800' :\n            type === 'success' ? 'bg-green-50 border border-green-200 text-green-800' :\n            'bg-blue-50 border border-blue-200 text-blue-800'\n        }`;\n        \n        notification.innerHTML = `\n            <div class=\"flex items-center\">\n                <div class=\"flex-shrink-0\">\n                    ${type === 'error' ? \n                        '<svg class=\"h-5 w-5 text-red-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\"/></svg>' :\n                        type === 'success' ?\n                        '<svg class=\"h-5 w-5 text-green-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\"/></svg>' :\n                        '<svg class=\"h-5 w-5 text-blue-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"/></svg>'\n                    }\n                </div>\n                <div class=\"ml-3 flex-1\">\n                    <p class=\"text-sm font-medium\">${message}</p>\n                </div>\n                <div class=\"ml-auto pl-3\">\n                    <button type=\"button\" class=\"notification-close inline-flex rounded-md p-1.5 hover:bg-gray-100 focus:outline-none\">\n                        <svg class=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                            <path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"/>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        // Add close functionality\n        notification.querySelector('.notification-close').addEventListener('click', () => {\n            notification.remove();\n        });\n        \n        // Add to page\n        document.body.appendChild(notification);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.remove();\n            }\n        }, 5000);\n    }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    const sessionId = window.location.pathname.split('/').pop();\n    if (sessionId && document.getElementById('main-progress-bar')) {\n        new TrainingProgressMonitor(sessionId);\n    }\n});"